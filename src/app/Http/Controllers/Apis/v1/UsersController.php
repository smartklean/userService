<?php

namespace App\Http\Controllers\Apis\v1;

use Carbon\Carbon;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Str;
use App\Models\User;
use App\Http\Resources\User as UserResource;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Http\Traits\HandlesJsonResponse;

class UsersController extends Controller
{
    use HandlesJsonResponse;
    /**
     * Create a new controller instance.
     *
     * @return void
     */

    private $foundMultipleMessage = 'response.messages.found_multiple';
    private $addedMessage = 'response.messages.added';
    private $foundMessage = 'response.messages.found';
    private $deletedMessage = 'response.messages.deleted';
    private $updatedMessage = 'response.messages.updated';
    private $notFoundMessage = 'response.messages.not_found';
    private $notValidMessage = 'response.messages.not_valid';
    private $notFoundError = 'response.errors.not_found';
    private $notFoundErrorCode = 'response.codes.not_found_error';
    private $successCode = 'response.codes.success';
    private $userAttribute = 'user';
    private $userPassword = 'user password';
    private $usersAttribute = 'users';
    private $isRequiredString = 'required|string|max:255';
    private $isNullableString = 'nullable|string|max:255';
    private $firstName = 'first_name';
    private $lastName = 'last_name';
    private $email = 'email';
    private $passwordString = 'password';
    private $oldPassword = 'old_password';
    private $newPassword = 'new_password';
    private $phoneNumber = 'phone_number';
    private $isDeveloper = 'is_developer';
    private $emailVerificationCodeString = 'email_verification_code';
    private $skipEmailVerification = 'skip_email_verification';
    private $status = 'status';
    private $message = 'message';

    public function fetchUserInstance(Request $request){
      return (new UserResource($request->user()))
            ->additional([
              $this->status => true,
              'code' => __($this->successCode),
              $this->message => __($this->foundMessage, ['attr' => $this->userAttribute]),
            ], 200);
    }

    public function fetch(Request $request, $limit = null){
      $rules = [
          "params" => "nullable|array",
          "params.*" => "nullable|distinct"
      ];

      $validator = Validator::make($request->all(), $rules);

      if($validator->fails()){
        return $this->jsonValidationError($validator);
      }

      $params = $request->input('params');

      if($params){
        $users = [];

        foreach($params as $param){
          $user = User::where([
            'id' => $param
          ])
          ->orWhere([
            $this->email => $param
          ])
          ->orWhere([
            $this->phoneNumber => $param
          ])->first();

          array_push($users, $user);
        }
      }else{
        if(!$limit){
          $users = User::all();
        }
        else{
          $users = User::paginate($limit);
        }
      }

      return UserResource::collection($users)
              ->additional([
                $this->status => true,
                'code' => __($this->successCode),
                $this->message => __($this->foundMultipleMessage, ['attr' => $this->usersAttribute]),
              ], 200);
    }

    public function store(Request $request){
      $rules = [
        $this->firstName => $this->isRequiredString,
        $this->lastName => $this->isRequiredString,
        $this->passwordString => $this->isNullableString.'|confirmed',
        $this->email => 'required|email|max:255|unique:users',
        $this->phoneNumber => $this->isRequiredString.'|unique:users',
        $this->isDeveloper => 'nullable|boolean',
      ];

      $validator =  Validator::make($request->all(), $rules);

      if($validator->fails()){
        return $this->jsonValidationError($validator);
      }

      $autoGeneratedPassword = Str::random(16);

      $password = $request->input($this->passwordString) !== null ? Hash::make($request->input($this->passwordString)) : Hash::make($autoGeneratedPassword);

      $unhashedEmailVerificationCode = str_shuffle(uniqid().uniqid());

      $emailVerificationCode = $request->input($this->skipEmailVerification) ? null : Hash::make($unhashedEmailVerificationCode);

      $emailVerifiedAt = $request->input($this->skipEmailVerification) ? Carbon::now() : null;

      $user = User::create([
        $this->firstName => $request->input($this->firstName),
        $this->lastName => $request->input($this->lastName),
        $this->email => $request->input($this->email),
        $this->emailVerificationCodeString => $emailVerificationCode,
        'email_verified_at' => $emailVerifiedAt,
        $this->passwordString => $password,
        $this->phoneNumber => $request->input($this->phoneNumber),
        $this->isDeveloper => $request->input($this->isDeveloper) ? $request->input($this->isDeveloper) : false,
      ]);

      return (new UserResource($user))
            ->additional([
              $this->status => true,
              'code' => __($this->successCode),
              $this->message => __($this->addedMessage, ['attr' => 'user']),
              $this->emailVerificationCodeString => $unhashedEmailVerificationCode
            ], 201);
    }

    public function update(Request $request, $id){
      $user = User::find($id);

      if(!$user){
        return $this->jsonResponse(__($this->notFoundMessage, ['attr' => $this->userAttribute]), __($this->notFoundErrorCode), 404, [], __($this->notFoundError));
      }

      $rules = [
        $this->firstName => $this->isNullableString,
        $this->lastName => $this->isNullableString,
        $this->email => 'nullable|email|max:255|unique:users,email,'.$user->id,
        $this->phoneNumber => $this->isNullableString.'|unique:users,phone_number,'.$user->id,
        $this->isDeveloper => 'nullable|boolean',
      ];

      $validator =  Validator::make($request->all(), $rules);

      if($validator->fails()){
        return $this->jsonValidationError($validator);
      }

      $user->fill([
        $this->firstName => $request->input($this->firstName) ? $request->input($this->firstName) : $user->first_name,
        $this->lastName => $request->input($this->lastName) ? $request->input($this->lastName) : $user->last_name,
        $this->email => $request->input($this->email) ? $request->input($this->email) : $user->email,
        $this->phoneNumber => $request->input($this->phoneNumber) ? $request->input($this->phoneNumber) : $user->phone_number,
        $this->isDeveloper => $request->input($this->isDeveloper) ? $request->input($this->isDeveloper) : $user->is_developer,
      ])->save();

      return (new UserResource($user))
            ->additional([
              $this->status => true,
              'code' => __($this->successCode),
              $this->message => __($this->updatedMessage, ['attr' => $this->userAttribute]),
            ], 200);
    }

    public function destroy($id){
      $user = User::find($id);

      $old = $user;

      if(!$user){
        return $this->jsonResponse(__($this->notFoundMessage, ['attr' => $this->userAttribute]), __($this->notFoundErrorCode), 404, [], __($this->notFoundError));
      }

      $user->delete();

      return (new UserResource($old))
            ->additional([
              $this->status => true,
              'code' => __($this->successCode),
              $this->message => __($this->deletedMessage, ['attr' => $this->userAttribute]),
            ], 200);
    }

    public function changePassword(Request $request){
      $rules = [
        $this->oldPassword =>$this->isRequiredString,
        $this->newPassword => $this->isRequiredString.'|confirmed',
      ];

      $validator =  Validator::make($request->all(), $rules);

      if($validator->fails()){
        return $this->jsonValidationError($validator);
      }

      $password = $request->input($this->oldPassword);

      $user = User::find($request->id);

      if (Hash::check($password, $user->password)) {
        $user->fill([
          $this->passwordString => Hash::make($request->input($this->newPassword)),
        ])->save();
  
        return (new UserResource($user))
              ->additional([
                $this->status => true,
                'code' => __($this->successCode),
                $this->message => __($this->updatedMessage, ['attr' => $this->userPassword]),
              ], 200);
      }else{
        return $this->jsonResponse(__($this->notValidMessage, ['attr' => 'Password you entered']), __($this->notFoundErrorCode), 404, [], __($this->notFoundError));
      }
    }
}
