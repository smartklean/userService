# Do not edit
# -----
# You can specify a custom docker image from Docker Hub as your build environment.

image: cashenvoyng/deploykit-php-aws:latest
clone:
  depth: full # SonarCloud scanner needs the full history to assign issues properly

definitions:
  services:
    docker:
      memory: 2048 
    mysql:
      image: mysql
      environment:
        MYSQL_DATABASE: 'homestead'
        MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
        MYSQL_USER: 'homestead'
        MYSQL_PASSWORD: 'secret'

  caches:
    sonar: ~/.sonar/cache  # Caching SonarCloud artifacts will speed up your build
  
  steps:
    - step: &build-test-sonarcloud
        name: Build, test and analyze on SonarCloud
        caches:
          - docker
          - composer
          - sonar
        script:
          - apt-get update && apt-get install -y unzip
          - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
          - cd src && composer update
          - cp .env.example .env
          - sed -ir "s/^[#]*\s*${ENV_VAR_PREFIX}DB_HOST=.*/${ENV_VAR_PREFIX}DB_HOST=127.0.0.1/" .env
          - sed -ir "s/^[#]*\s*${ENV_VAR_PREFIX}TEST_DB_HOST=.*/${ENV_VAR_PREFIX}TEST_DB_HOST=127.0.0.1/" .env
          - php artisan migrate --force --no-interaction -vvv && php artisan passport:install --force
          - export XDEBUG_MODE=coverage
          - ./vendor/bin/phpunit #--log-junit ./test-reports/junit.xml --coverage-clover ./test-reports/phpunit.coverage.xml
          - pipe: sonarsource/sonarcloud-scan:1.2.0
          - rm -rf .env .envr && cd ..
        services:
          - mysql
    - step: &check-quality-gate-sonarcloud
        name: Check the Quality Gate on SonarCloud
        script:
          - pipe: sonarsource/sonarcloud-quality-gate:0.1.4
    - step: &deploy-to-staging
        name: Deploy to Staging
        caches:
          - docker
          - composer
        deployment: Staging
        script:
          - git clone git@bitbucket.org:cashenvoy-engineering/deploy-kit.git
          - cd deploy-kit && cp -r * ../ && cd .. && ls -latr
          - echo "Deploying To Staging Environment"
          - ./appws_deploy.sh Staging Webservice
        services:
          - docker
    - step: &deploy-to-production
        name: Deploy to Production
        caches:
          - docker
          - composer
        deployment: Production
        script:
          - echo "Deploying To Production Environment - Coming Soon"
        services:
          - docker
          
pipelines:
  custom:
    deploy-to-staging:
     - step: *deploy-to-staging 
  
  branches:
    master:
      - step: *build-test-sonarcloud
      - step: *check-quality-gate-sonarcloud

  pull-requests:
    '**':
      - step: *build-test-sonarcloud
      - step: *check-quality-gate-sonarcloud
